import os
from dotenv import load_dotenv

from youtube_transcript_api import YouTubeTranscriptApi
from googleapiclient.discovery import build

load_dotenv()  # This loads the .env file

api_key = os.getenv('YOUTUBE_API_KEY')
if not api_key:
    raise ValueError("Please set the YOUTUBE_API_KEY environment variable.")

youtube = build('youtube', 'v3', developerKey=api_key)

# Retrieve all video IDs from a YouTube channel
def get_video_ids(channel_id):
    video_ids = []
    request = youtube.search().list(part='id', channelId=channel_id, maxResults=50, type='video')
    response = request.execute()

    while request is not None:
        for item in response['items']:
            video_ids.append(item['id']['videoId'])
        request = youtube.search().list_next(request, response)
        response = request.execute() if request is not None else []

    return video_ids

def save_transcript(video_id, transcript, transcript_file_path):
    # Save the transcription in a new file
    with open(transcript_file_path, 'w', encoding='utf-8') as file:
        # Write a header for the transcript
        file.write(f"Transcript for Video ID: {video_id}\n")
        # Append the transcript to the file
        for line in transcript:
            file.write(f"{line['text']}\n")

# Ask for the channel ID and language code
channel_id = input("Please, paste channel ID: ").strip()
language_code = input("Please, enter the language code: ").strip()

video_ids = get_video_ids(channel_id)

# Create a directory for the given channel
directory = f"{channel_id}_transcripts"
os.makedirs(directory, exist_ok=True)

# Open a single file with the channel ID as the filename
for video_id in video_ids:
    transcript_file_path = os.path.join(directory, f"{video_id}.txt")

    try:
        transcript_list = YouTubeTranscriptApi.list_transcripts(video_id)

        # Tries to get the given language transcript
        transcript = transcript_list.find_transcript([language_code])
        
        # Save the transcription if it's not autogenerated
        if transcript and not transcript.is_generated:
            transcript_data = transcript.fetch()
            save_transcript(video_id,transcript_data, transcript_file_path)

    except Exception as e:
        # Optionally print errors for debugging
        print(f"An error occurred for video ID {video_id}: {e}")